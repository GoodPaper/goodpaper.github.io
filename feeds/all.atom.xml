<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>knowidea</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2019-01-28T19:00:00+09:00</updated><entry><title>RabbitMQ - Federated exchange</title><link href="/rabbitmq-federated-exchange.html" rel="alternate"></link><published>2019-01-28T19:00:00+09:00</published><updated>2019-01-28T19:00:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-28:/rabbitmq-federated-exchange.html</id><summary type="html">&lt;p&gt;RabbitMQ Study - Federated exchange&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;본 문서는 RabbitMQ의 Federated exchange 개념에 대한 문서를 해석한 문서입니다. 의역이 있을 수 있으니 이 점 참고해 주세요.&lt;/p&gt;
&lt;h1&gt;Requirement&lt;/h1&gt;
&lt;p&gt;A 장비에 있는 RabbitMQ broker의 Exchange를 통해 나가는 메시지가 B 장비에 있는 RabbitMQ broker의 Queue에 들어가야 하는 요구사항이 있었기에, Federation을 찾아보게 되었습니다.&lt;/p&gt;
&lt;h1&gt;What does a federated exchange do?&lt;/h1&gt;
&lt;p&gt;Federated Exchange는 다른 Exchange(upstream exchange)에 연결되고, Upstream exchange에 발송된 메시지는 Federated exchange에 복사가 된다. ( 아래 그림을 우선 보시면 무슨 내용인지 이해가 갈 겁니다. )&lt;br/&gt;
Upstream exchange는 본 작업을 위해서 재설정을 하지 않아도 되고, 같은 Broker나 같은 Cluster에 없어도 된다.&lt;br/&gt;
아래 그림은 1개의 Broker에 있는 1개의 Single federated exchange가 다른 Broker들에 소속된 Upstreaming Exchange 들에 연결되어 있는 것을 도식화 한 것이다.&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="RabbitMQ Federation" src="/images/rmq_federation/rmq_federation_00.png"&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. Are all messages copied?&lt;/h3&gt;
&lt;p&gt;원하는 메시지만 복사할 수도 있다. 이 설정은 federation plugin을 통해서 설정할 수 있는데, 그 방법은 아래에 나온다.&lt;/p&gt;
&lt;h3&gt;2. How does a federated exchange link to its upstream exchanges?&lt;/h3&gt;
&lt;p&gt;Federated exchange를 설정하면, 각 Upstream exchange들의 목록이 Connection properties와 함께 보여진다.&lt;/p&gt;
&lt;h3&gt;3. Can I federate a federated exchange?&lt;/h3&gt;
&lt;p&gt;Federated exchange를 upstream exchange로 사용하는 것을 막을 방법은 없다...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loop Case: A, B Exchange가 서로를 upstream exchange라고 설정하면, 이게 Loop가 되는 것임...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여러 개의 Exchange로 형성된 Infinite Loop이 있을 수 있는데... 이 때 메시지가 계속 re-route되는 것을 막고 싶다면, 메시지가 복사되는 최대 회수를 제한하면 된다. max-hop 참고.&lt;/p&gt;
&lt;h3&gt;4. Can I federate any exchange?&lt;/h3&gt;
&lt;p&gt;거의 다 된다고 보면된다. 단, Default exchange( '' )를 federate 할 수는 없다. ( 이건, Queue에 직접 접근할 때 사용하는 것이기 때문... )&lt;br/&gt;
그 외에 RabbitMQ가 내부적으로 사용하는 Exchange에 대해서는 사용할 수 없음.&lt;/p&gt;
&lt;h3&gt;5. What are typical uses for federated exchanges?&lt;/h3&gt;
&lt;p&gt;일반적으로 사용하는 Logical Exchange를 N개의 다른 Broker의 Exchange로 분산시킬때 사용한다.&lt;br/&gt;
또 다른 예로는 1개의 Massive fanout을 수행하는 Exchange가 N개의 다른 Broker에 메시지를 전달하는 경우가 있다.&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;Inter-broker communication은 AMQP로 구현된다. Binding은 같이 설정되고, bind / unbind 명령은 upstream exchange로 전송된다. 따라서, federated exchange는 subscription을 갖고 있어야만 메시지를 받을 수 있다.&lt;br/&gt;
Binding이 설정될 때, upstream으로는 비동기적으로 명령이 발송되기 때문에, adding / removing binding의 효과는 (메시지가 왔다갔다 하는 것이) 보여질 때 비로소 보증된다...???&lt;br/&gt;&lt;br/&gt;
메시지는 upstream exchange가 있는 브로커의 특정 큐에 버퍼링된다. 이를 &lt;strong&gt;Upstreaming queue&lt;/strong&gt;라고 한다.&lt;br/&gt;
아래는 1개의 Federated exchange와 1개의 Upstream exchange가 연결된 것을 보여준다. 그림에서 보면 왼쪽의 회색으로 표현된 upstream queue가 보이는데, upstreaming queue를 이용해서 binding이 된 것을 표현하는 것이다.&lt;br/&gt;
upstream link에 있는 두꺼운 화살표는 메시지가 federated exchange로 republish 되는 것을 표현한 것이다.
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="1:1 Topology" src="/images/rmq_federation/rmq_federation_01.png"&gt;
&lt;br/&gt;&lt;br/&gt;
두 개의 Exchange에 무언가를 보내면, federated exchange에 연결된 queue에서 그 정보를 받을 것이다. 하지만, Federated exchange(오른쪽)에 메시지를 직접 보내면, upstream exchange가 있는 브로커 내의 queue(왼쪽 아래)는 그 메시지를 받을 수 없다.&lt;/p&gt;
&lt;h1&gt;Example topologies&lt;/h1&gt;
&lt;p&gt;여러가지 Topology를 보여줄 텐데, RabbitMQ broker는 주황색 토끼 얼굴로 표시된다. (cluster가 될 수도 있음.)&lt;/p&gt;
&lt;h3&gt;1. Pair of federated exchanges&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="1:1 pair" src="/images/rmq_federation/rmq_federation_02.png"&gt;
&lt;br/&gt;&lt;br/&gt;
각 Exchange는 서로 대칭된 상태로 연결되어 있다. 두 개의 Consumer가 각자의 Publisher가 보낸 메시지를 받을 수 있다.&lt;br/&gt;
각 링크는 max-hops=1로 설정되어 있는데, 이는 메시지가 1번만 복사된다는 의미이다. ( 1 이상으로 설정하면, 동일한 메시지의 Multiple copy를 볼 수 있게 되니... 꼬이게 됨... )&lt;/p&gt;
&lt;h3&gt;2. Small complete graph&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="small complete graph" src="/images/rmq_federation/rmq_federation_03.png"&gt;
&lt;br/&gt;&lt;br/&gt;
위와 유사하되, 3개의 Exchange가 서로 맞물려 있는 상태이다. 여기서도 max-hops=1로 지정한다. (지정된 녀석에게만 전달되도록...)&lt;/p&gt;
&lt;h3&gt;3. Fan-out&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="fan-out" src="/images/rmq_federation/rmq_federation_04.png"&gt;
&lt;br/&gt;&lt;br/&gt;
1개의 Master exchange가 tree 형태로 다른 Exchange와 연결되고, Depth가 깊어질 수록 확장되는 형태이다. Tree에 연결된 Exchange node들은 모두 Master가 보낸 메시지를 받을 수 있다.&lt;br/&gt;
Loop이 없기 때문에, max-hops 값이 크게 중요하지는 않지만, 적어도, longest depth 값 만큼은 입력이 되야 된다. (그래야 끝까지 전달이 되지...) Tree level - 1 값이면 된다.&lt;/p&gt;
&lt;h3&gt;4. Ring&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="ring" src="/images/rmq_federation/rmq_federation_05.png"&gt;
&lt;br/&gt;&lt;br/&gt;
Ring 안에 6개의 브로커가 단일 링크로 연결되어 있다. max-hops=5이기 때문에, 어떤 메시지를 보냈을 때, 자기 자신한테까지 돌아오지는 않는다.&lt;br/&gt;
1개의 Broker가 오동작을 일으키면, 이 토폴로지 자체가 깨지기 때문에, 상대적으로 견고하지는 않은 Topology이다.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/federated-exchanges.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - Federated exchange test</title><link href="/rabbitmq-federated-exchange-test.html" rel="alternate"></link><published>2019-01-28T19:00:00+09:00</published><updated>2019-01-28T19:00:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-28:/rabbitmq-federated-exchange-test.html</id><summary type="html">&lt;p&gt;RabbitMQ Study - Federated exchange test&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;RabbitMQ의 Federated exchange를 구성해 봅니다. 아래 참조에 있는 Youtube를 참고하였습니다.&lt;/p&gt;
&lt;h2&gt;0. Prerequisite&lt;/h2&gt;
&lt;p&gt;Following plugins should be enabled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmq-plugins &lt;span class="nb"&gt;enable&lt;/span&gt; rabbitmq_federation
$ rabbitmq-plugins &lt;span class="nb"&gt;enable&lt;/span&gt; rabbitmq_federation_management
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1. Define exchange and queue in both( Upstream and Downstream ) broker.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;create exchange&lt;blockquote&gt;
&lt;p&gt;vhost: test ( whatever you made )&lt;br/&gt;
name: &lt;strong&gt;custom-exchange&lt;/strong&gt; ( whatever you want )&lt;br/&gt;
type: direct ( fanout, topic are also possible. )&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;create queue&lt;blockquote&gt;
&lt;p&gt;vhost: test ( smae as above )&lt;br/&gt;
name: : &lt;strong&gt;custom-exchange-queue&lt;/strong&gt; ( whatever you want )&lt;br/&gt;
bind: exchange is &lt;strong&gt;custom-exchange&lt;/strong&gt; | routing key is &lt;strong&gt;test&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. Define upstream in downstream broker.&lt;/h2&gt;
&lt;p&gt;By management web, goto admin -&amp;gt; federation upstreams - add a new upstream
1. vhost: test&lt;br/&gt;
2. name: &lt;strong&gt;A-2-B&lt;/strong&gt;&lt;br/&gt;
3. URI: amqp://user:password@ip_of_upstream_broker:port/vhost&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;By CLI&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rabbitmqctl set_parameter federation-upstream A-2-B &lt;span class="s1"&gt;&amp;#39;{&amp;quot;uri&amp;quot;:&amp;quot;amqp://user:password@ip_of_upstream_broker:port/vhost&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Define policy in downstream broker.&lt;/h2&gt;
&lt;p&gt;By management web, goto admin -&amp;gt; policies -&amp;gt; add / update a policy.
1. vhost: test&lt;br/&gt;
2. name: &lt;strong&gt;A-2-B-POLICY&lt;/strong&gt;&lt;br/&gt;
3. pattern: &lt;strong&gt;custom-exchange-queue&lt;/strong&gt;&lt;br/&gt;
4. definition: federation-upstream-set = all&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;definition parameter에 대한 내용은 더 알아봐야 겠습니다...&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By CLI,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmqctl set_policy --apply-to exchanges A-2-B-POLICY &lt;span class="s2"&gt;&amp;quot;custom-exchange-queue&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;federation-upstream-set&amp;quot;:&amp;quot;all&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Check federation status&lt;/h2&gt;
&lt;p&gt;By management web, admin -&amp;gt; federation status.&lt;/p&gt;
&lt;h1&gt;TEST&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;In upstream broker, publish message in 'Exchange' with routing key.&lt;/li&gt;
&lt;li&gt;In downstream broker, get messages in 'Queue'.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.youtube.com/watch?v=-ysZPO_3HF0&lt;/li&gt;
&lt;li&gt;https://jee-appy.blogspot.com/2018/08/setup-rabbitmq-exchange-federation.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - Federated queue</title><link href="/rabbitmq-federated-queue.html" rel="alternate"></link><published>2019-01-28T19:00:00+09:00</published><updated>2019-01-28T19:00:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-28:/rabbitmq-federated-queue.html</id><summary type="html">&lt;p&gt;RabbitMQ Study - Federated queue&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;본 문서는 RabbitMQ의 Federated queue 개념에 대한 문서를 해석한 문서입니다. 의역이 있을 수 있으니 이 점 참고해 주세요.&lt;/p&gt;
&lt;h1&gt;Introduce&lt;/h1&gt;
&lt;p&gt;Federated exchange 말고 Federated queue도 제공한다. 이 기능을 통해서 로드 밸런싱 효과를 줄 수 있다.&lt;br/&gt;
Federated queue는 upstream queue라고 부를 수 있는 다른 큐들과 연결된다. upstream queue 역시 upstream exchange와 같이 본 환경을 위해서 재설정하거나, federated queue와 같은 broker나 cluster에 있을 필요는 없다.&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="Federated queue" src="/images/rmq_federation/rmq_federation_06.png"&gt;
&lt;br/&gt;&lt;br/&gt;
위 그림은 두 개의 RabbitMQ Node가 Queue federation으로 연결되어 있는 것을 도식화 한 것이다. 설정은 Downstream인 Federated queue가 있는 Broker만 설정해 주면 된다.&lt;/p&gt;
&lt;h1&gt;Typical Use Cases&lt;/h1&gt;
&lt;p&gt;일반적인 경우는 같은 Logical queue가 N개의 Broker에 분산된 경우이다.&lt;br/&gt;
Logical Distributed queue는 Single queue보다 높은 가용성을 가지게 되는데...  상대적으로 Single queue일 때보다, Consume 처리량이 더 많다. (N개의 Client가 붙어있을 테니...) 고로, Federation mechanism은 로드 밸런싱을 위해서 사용된다.&lt;/p&gt;
&lt;h1&gt;Using Federated Queues&lt;/h1&gt;
&lt;p&gt;Federated queue는 보통 다릍 큐들과 동일하게 application으로 부터 선언이 되는데... Downstream에 있는 Node가 설정이 되어야 한다.&lt;br/&gt;
설정은 별거 없이 policies를 선언하는 것으로 끝난다. Policy는 queue 이름을 매칭시키는 패턴인데, Matching queue가 federated 되는 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Federated queue는 1개의 Policy만 따를 수 있다.&lt;br/&gt;
여러개의 policy가 1개 queue 이름에 match되면, policy는 높은 우선 priority에만 적용된다.&lt;br/&gt;
2개의 policy가 동일한 priority를 가지면, non-deterministically 하게 1개가 선택된다.
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="Federated queue" src="/images/rmq_federation/rmq_federation_07.png"&gt;
&lt;br/&gt;&lt;br/&gt;
Policy는 Management UI를 통해 수동으로 지정할 수도 있고, rabbitmqctl 혹은 HTTP API를 통해서도 설정할 수 있다.&lt;br/&gt;
Federated queue는 다른 Federated queue의 upstream queue도 될 수 있는데, Loop를 만들 수도 있다.
A, B 라는 큐가 서로 Upstream queue라고 지정해버리면, Loop가 되는 것임.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;How it works&lt;/h1&gt;
&lt;p&gt;Federated queue는 자신과 연결된 모든 upstream queue와 AMQP로 연결된다. Federated queue를 설정할 때, upstream queue의 목록이 connection properties와 함께 전시된다. ( Exchange와 동일한 듯. )&lt;br/&gt;
Federated queue는 Locally 메시지가 전부 소모되었거나, Consumer가 메시지를 요청하거나, upstream queue가 아직 Consume 되지 않은 여분의 메시지를 가지고 있을때, 메세지를 제공한다...???&lt;br/&gt;
Federated queue가 원할 때만 메시지를 보내는 것은 Consumer priorities를 이용한다.&lt;br/&gt;&lt;br/&gt;
메시지들이 어떤 큐에서 다른 큐로 전달될때, 노드 간에 같은 Journey로 이동한 메시지들에 대해서만 메시지 순서가 보장이 된다. 같은 노드로 보낸다고 해도, 인접 노드를 거쳐서 가는 경우가 있을 수 있는데, 이 경우 메시지들은 queue federation을 이용해서 재정렬할 수도 있다.&lt;br/&gt;&lt;br/&gt;
각각의 큐는 각자 고유한 인자값을 받을 수 있다. x-max-length 라는 값을 federated queue에 설정하면, queue는 내부적으로 limit 값을 설정한다. 하지만 이를 federated 한 다른 큐들은 이 설정에 영향을 받지 않는다.&lt;br/&gt;
Federated exchange와는 다르게, 메시지를 이동 숫자(hop)에 대한 제한은 없다.&lt;/p&gt;
&lt;h1&gt;Limitations&lt;/h1&gt;
&lt;p&gt;local queue가 없으면, basic.get으로 메시지를 받을 수 없다. basic.get은 synchronous method이기 때문에, 다른 모든 노드가 메시지들을 제공할 때까지 Blocking 해버린다.&lt;br/&gt;&lt;br/&gt;
서로 다른 버전의 Broker들이 같이 연결되어 돌아갈 수는 있으나, queue federation은 confumer priorities를 필요로 하기 때문에, 3.2.0 version 이전의 버전과는 호환될 수 없다.&lt;/p&gt;
&lt;h1&gt;Pitfalls&lt;/h1&gt;
&lt;p&gt;Federated queue는 현재 multiple hop을 이동할 수 없게 되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예를 들면, A, B, C 큐가 있는데, A-B, B-C 이렇게 연결되어 있다. ( 즉 A - B - C 이렇게... )&lt;br/&gt;
매시지가 A에 있고, C에서 Consumer가 대기하고 있으면, B에 Consumer가 있지 않는 한, 그 메시지는 C까지 이동할 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Federated queue와 Federated exchange를 bind 하는 것은 가능하지만, 원하는 결과가 나오지 않을 수 있다. Federated exchange는 메시지를 upstream exchange에서 발송하는데, binding에 matching이 되는 곳엔 전부 메시지를 보낸다. Federated queue는 이 메시지를 연결된 노드로 보낼텐데... 이렇게 되면, 맨 끝의 노드에서는 같은 메시지의 여러 Copy를 받을 수 있게 된다.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/federated-queues.html&lt;/li&gt;
&lt;li&gt;https://medium.com/@jooyunghan/non-deterministic-c8c8d4fc4424&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - Federation</title><link href="/rabbitmq-federation.html" rel="alternate"></link><published>2019-01-28T19:00:00+09:00</published><updated>2019-01-28T19:00:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-28:/rabbitmq-federation.html</id><summary type="html">&lt;p&gt;RabbitMQ Study - Federation&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Federation plugin을 통해서, 클러스터링 없이, broker 사이에 메시지를 전달할 수 있다. 몇 개의 유용한 이유를 나열하자면...&lt;/p&gt;
&lt;h3&gt;1. Loose coupling of nodes or clusters&lt;/h3&gt;
&lt;p&gt;서로 다른 adminstrative domain을 가진 broker나 cluster 간에 메시지를 공유 할 수 있다.
- 각자 다른 User와 Virtual host를 가지고 있을 수 있다.
- 각자 다른 Version의 RabbitMQ와 Erlang을 사용할 수도 있다.&lt;/p&gt;
&lt;h3&gt;2. WAN Freidliness&lt;/h3&gt;
&lt;p&gt;AMQP 0.9.1을 사용하는데, 이는 간헐적 접속 장애에 대한 내구성을 지니고 있다.&lt;/p&gt;
&lt;h3&gt;3. Specifity&lt;/h3&gt;
&lt;p&gt;Broker에서 federated component를 가질수 있다. 다시 말하면, 우리가 원하지 않으면, 모든 것을 federate 하지 않아도 된다.&lt;/p&gt;
&lt;h3&gt;4. Scalability with growing connected node count&lt;/h3&gt;
&lt;p&gt;Federation은 N개의 Broker 사이에서 O(n2)의 connection을 할 필요가 없다.&lt;/p&gt;
&lt;h1&gt;What does it do?&lt;/h1&gt;
&lt;p&gt;이 플러그인을 통해서 Exchange나 queue를 Federate 할 수 있다. Federated exchange나 queue는 1개 이상의 upstream 에서 메시지를 수신할 수 있다.&lt;br/&gt;
Upstream으로 연결하려면 RabbitMQ Erlang client를 이용해야 한다.&lt;/p&gt;
&lt;h1&gt;How is federation set up?&lt;/h1&gt;
&lt;p&gt;2가지 방법이 있다.
 - Runtime parameter로 설정
 - Federation management plugin으로 설정 ( Management UI의 Federation tap을 추가해 준다. )&lt;/p&gt;
&lt;p&gt;1개 이상의 policies를 이용하여 federation을 구성할 수 있다.&lt;/p&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;p&gt;아래 명령을 입력하여 플러그인을 활성화 한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmq-plugins &lt;span class="nb"&gt;enable&lt;/span&gt; rabbitmq_federation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;management plugin을 이용해서 federation을 구축하려면 아래 명령어를 입력한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmq-plugins &lt;span class="nb"&gt;enable&lt;/span&gt; rabbitmq_federation_management
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
Federation의 upstream과 관련된 정보는 RabbitMQ Database에 저장이 된다. ( user, permission, queue 등... )&lt;br/&gt;
Federation을 구축하기 위해선 3단계의 설정이 필요하다.&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upstreams: 각 upstream은 어떻게 다른 broker에 접속할 지 정의되어야 한다.&lt;/li&gt;
&lt;li&gt;Upstream sets: 각 upstream set는 1개의 upstream set로 구성되어 있다...?&lt;/li&gt;
&lt;li&gt;Policies: 각 Policy는 Exchange 혹은 Queue 혹은 두 개의 혼합의 set로 구성되며, single upstream이나 upstream set에 적용된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;upstream이나 upstream set는 둘다 runtime parameter이다. Parameter와 policies는 3가지 방법을 통해서 설정될 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rabbitmqctl 혹은 HTTP API 혹은 management ui를 통해서...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;A simple example&lt;/h1&gt;
&lt;p&gt;default exchange를 제외한 모든 built-in exchange를 1개의 upstream과 federate 해본다. Upstream은 1시간 후에 종료되는 것으로 설정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmqctl set_parameter federation-upstream my-upstream &lt;span class="s1"&gt;&amp;#39;{&amp;quot;uri&amp;quot;:&amp;quot;amqp://server-name&amp;quot;, &amp;quot;expires&amp;quot;:3600000}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그 다음, built-in exchange과 matching되는 policy를 만들고 이를 upstream에 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmqctl set_policy --apply-to exchanges federate-me &lt;span class="s2"&gt;&amp;quot;^amq\.&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;federation-upstream-set&amp;quot;:&amp;quot;all&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"amq."라고 시작하는 모든 Exchange에 대해서 federate을 하고, 'all'이라는 이름의 upstream set와 federation을 구성하였다. 아래 명령을 통해서 적용 여부를 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rabbitmqctl list_exchanges name policy &lt;span class="p"&gt;|&lt;/span&gt; grep federated-me
$ rabbitmqctl &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rabbit_federation_status:status().&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/federation.html&lt;/li&gt;
&lt;li&gt;https://www.rabbitmq.com/uri-spec.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - #00</title><link href="/rabbitmq-00.html" rel="alternate"></link><published>2019-01-25T11:30:00+09:00</published><updated>2019-01-25T11:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-25:/rabbitmq-00.html</id><summary type="html">&lt;p&gt;RabbitMQ Study #00&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Prologue&lt;/h2&gt;
&lt;p&gt;여기서는 몇장의 이미지만 올립니다.&lt;/p&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;&lt;img alt="definition" src="/images/rmq_00/rmq_00_definition.png"&gt;&lt;/p&gt;
&lt;h2&gt;Exchange Type&lt;/h2&gt;
&lt;p&gt;&lt;img alt="definition" src="/images/rmq_00/rmq_00_exchange_type.png"&gt;&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - #01</title><link href="/rabbitmq-01.html" rel="alternate"></link><published>2019-01-25T11:30:00+09:00</published><updated>2019-01-25T11:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-25:/rabbitmq-01.html</id><summary type="html">&lt;p&gt;RabbitMQ Study #01 -&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;본 문서는 RabbitMQ 홈페이지에 나와 있는 튜토리얼 문서를 공부하는 차원에서 필요한 부분만 해석해서 요약한 문서입니다. 이 점 참고해주세요.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;RabbitMQ는 메시지 브로커이다. 우체국으로 생각하면 편함.
 - 우체통에 편지를 넣으면, 우체부가 수신처에 편지를 갖다줄 것이라는 확신을 할 수 있지 않은가??
여기서 우체국, 우체통, 우체부를 RabbitMQ라 할 수 있다. (있단다...)&lt;/p&gt;
&lt;p&gt;&lt;img alt="producer producer" src="/images/rmq_01/rmq_01_producer.png"&gt;&lt;/p&gt;
&lt;p&gt;Producing은 메시지를 전달하는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue queue" src="/images/rmq_01/rmq_01_queue.png"&gt;&lt;/p&gt;
&lt;p&gt;Queue는 RabbitMQ 안에 들어있는 우체통과 같은 것이다. 이 큐는 RabbitMQ Server가 존재하는 Host의 리소스를 잡아먹기 때문에, Host 서버만 성능이 좋으면 된다. 송수신부의 Application들은 이 Queue에 대한 성능에 신경쓸 필요가 없다.
1개 Queue에 여러 발송자가 메시지를 던질 수 있고, 1개 Queue에 여러 수신자가 메시지를 받아갈 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="consumer" src="/images/rmq_01/rmq_01_consumer.png"&gt;&lt;/p&gt;
&lt;p&gt;Consuming은 메시지를 수신하는 것을 의미한다. (그 메세지에 대한 처리는 알아서들 하겠지...)&lt;/p&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;여기서는 Python을 예로 사용한다. RabbitMQ를 활용하기 위한 Python의 package는 pika이다.
Tutorial로 Producer / Consumer를 각각 만들어서 테스트 해 볼 것임. 이를 도식화하면 아래와 같음.&lt;/p&gt;
&lt;p&gt;&lt;img alt="overall" src="/images/rmq_01/rmq_01_overall.png"&gt;&lt;/p&gt;
&lt;h3&gt;1. Sending&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sending" src="/images/rmq_01/rmq_01_sending.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="c1"&gt;# connection 설정득 &amp;amp; channel 획득&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Queue 선언&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 데이터 전송.&lt;/span&gt;
&lt;span class="c1"&gt;# RabbitMQ에서 메시지는 Queue로 바로 보낼 수 없고, Exchange를 거쳐서만 갈 수 있다. 자세한건 다음에 나오니, 우선 그렇다는 것만 알고 넘어감...&lt;/span&gt;
&lt;span class="c1"&gt;# Exchange를 공백으로 놓으면, 사용자가 지정한 Queue로 메시지를 바로 보낼수 있다. 이를 위해서 Routine key로 Queue 이름을 집어 넣는다.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;exchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Sent &amp;#39;Hello World!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 다 했으면, Connection 종&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Receiving&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sending" src="/images/rmq_01/rmq_01_receiving.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="c1"&gt;# connection 설정 및 channel 획득&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Queue 선언( 위에서 선언했는데도 또 선언해도 되는가...? Queue 선언은 Idempotent 성격이 적용되기 때문에, 없으면 만들고, 있으면 그대로 있는 것을 씀.)료&lt;/span&gt;
&lt;span class="c1"&gt;# 생각해보면... 실제 환경에서는 Server / Client가 같은 서버에 있는 것도 아니고, 같은 코드를 공유하지 않을 수도 있으니... 이렇게 하면 더 편할듯.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 위에 정의한 함수를 callback으로 등록하고, 메시지가 오면, 위 함수가 실행됨.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_ack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 무한대 루프를 돌면서 메시지 수신을 처리한다. (나중에 종료하고 싶으면 Ctrl+c로 종료하면 된다.)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Result&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;##################### send.py&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Waiting &lt;span class="k"&gt;for&lt;/span&gt; messages. To &lt;span class="nb"&gt;exit&lt;/span&gt; press CTRL+C
 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Received b&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#####################&lt;/span&gt;

&lt;span class="c1"&gt;##################### receive.py&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Sent &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#####################&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Next...&lt;/h1&gt;
&lt;p&gt;다음 절에서는 Queue에 Naming을 한 다음 사용하는 것을 배운다.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/tutorials/tutorial-one-python.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>NAT 이란?</title><link href="/about-nat.html" rel="alternate"></link><published>2019-01-08T11:30:00+09:00</published><updated>2019-01-08T11:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-08:/about-nat.html</id><summary type="html">&lt;p&gt;What is NAT&lt;/p&gt;</summary><content type="html">&lt;h2&gt;왜 알아보게 되었나...&lt;/h2&gt;
&lt;p&gt;AWS로 개발을 하고 있다. 여러 서비스 중 VPC를 사용하고 있는데, 이 VPC 안에는 Public IP로 접근 가능한 Instance, Private IP로 접근 가능한 Instance들로 구성이 되어 있다. Public IP(Elastic IP)가 할당된 Instance들은 바로 SSH로 접속할 수 있지만, Private IP가 할당된 Instance는 일종의 매개체를 통해서 접속해야 한다. 그래서 공유기의 Port forwarding과 같은 역할을 하는 NAT용 Instance를 만들어야 하는데, NAT에 대한 정확한 정의를 확인하고자 하여 이 글을 작성하게 되었다.&lt;/p&gt;
&lt;h2&gt;사전적 정의&lt;/h2&gt;
&lt;p&gt;NAT: Network Address Translation. 네트워크 주소 변환.
IP Packet의 포트 번호, 발송지와 목적지의 IP 주소를 재기록하여 라우터를 통해 네트워크 트래픽을 주고 받는 기술.&lt;/p&gt;
&lt;h2&gt;왜 NAT을 사용함?&lt;/h2&gt;
&lt;p&gt;사설 네트워크에 있는 여러 Host가 하나의 공인 IP를 이용하여 인터넷에 접속하기 위함. 이를 사용함으로써, 
1. 인터넷 공인 IP 주소를 절약할 수 있고,
2. 사설망에 있는 장비를 외부의 침입자로부터 보호할 수 있음.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;http://jwprogramming.tistory.com/30&lt;/li&gt;
&lt;li&gt;http://darksoulstory.tistory.com/72&lt;/li&gt;
&lt;li&gt;https://kb.netgear.com/992/What-is-NAT-Network-Address-Translation&lt;/li&gt;
&lt;/ol&gt;</content><category term="network"></category></entry><entry><title>CentOS 7 - Rename file</title><link href="/centos7-rename-file.html" rel="alternate"></link><published>2017-10-10T19:40:00+09:00</published><updated>2017-10-10T19:40:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2017-10-10:/centos7-rename-file.html</id><summary type="html">&lt;p&gt;How rename multiple files in linux(CentOS) system?&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Circumstance&lt;/h2&gt;
&lt;p&gt;On developing SW module, I had to rename multiple files to handle requirements. Only files I had consisted with old file name conventions. So, I need to rename files in linux system. &lt;/p&gt;
&lt;h2&gt;Personal condition&lt;/h2&gt;
&lt;p&gt;I had a few knowledge about linux shell commands...&lt;/p&gt;
&lt;h2&gt;What access to solution&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I thought to write shell script.&lt;/li&gt;
&lt;li&gt;Search keyword 'rename multiple filename' at google.&lt;/li&gt;
&lt;li&gt;I got this link. &lt;a href="https://stackoverflow.com/questions/16541582/finding-multiple-files-recursively-and-renaming-in-linux"&gt;https://stackoverflow.com/questions/16541582/finding-multiple-files-recursively-and-renaming-in-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I follow the solution of kamituel. &lt;a href="https://stackoverflow.com/users/782609/kamituel"&gt;https://stackoverflow.com/users/782609/kamituel&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How I did&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -type f -name &lt;span class="s1"&gt;&amp;#39;*targetExpression*&amp;#39;&lt;/span&gt; -exec rename targetExpression newExpression &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;.: Current directory and childrens&lt;/li&gt;
&lt;li&gt;-type f: I will find node type as file.&lt;/li&gt;
&lt;li&gt;-name expression: Files with specific expression what I want to find.&lt;/li&gt;
&lt;li&gt;-exec: Execute command to result of find command.&lt;/li&gt;
&lt;li&gt;rename: Shell command to rename file.&lt;/li&gt;
&lt;li&gt;'{}': matched result files of find command. It uses arguments for rename command.&lt;/li&gt;
&lt;li&gt;\;: Means end of the exec expression. &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</content><category term="shell"></category></entry><entry><title>The very first article.</title><link href="/the-very-first-article.html" rel="alternate"></link><published>2017-10-06T07:30:00+09:00</published><updated>2017-10-06T07:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2017-10-06:/the-very-first-article.html</id><summary type="html">&lt;p&gt;About this blog...&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the very first article of this blog. I will keep upload information about SW Engineering. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The person who write contents in this blog is not only a non-native english speaker but also writing contents as english. Please understand to irregular syntax.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="pelican"></category></entry></feed>