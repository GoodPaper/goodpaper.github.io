<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>knowidea - middleware</title><link href="/" rel="alternate"></link><link href="/feeds/middleware.atom.xml" rel="self"></link><id>/</id><updated>2019-01-28T12:00:00+09:00</updated><entry><title>RabbitMQ - Federation</title><link href="/rabbitmq-federation.html" rel="alternate"></link><published>2019-01-28T12:00:00+09:00</published><updated>2019-01-28T12:00:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-28:/rabbitmq-federation.html</id><summary type="html">&lt;p&gt;RabbitMQ Study - Federation&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;본 문서는 RabbitMQ의 Federation 개념에 대한 문서를 해석한 문서입니다. 의역이 있을 수 있으니 이 점 참고해 주세요.&lt;/p&gt;
&lt;h1&gt;Requirement&lt;/h1&gt;
&lt;p&gt;A 장비에 있는 RabbitMQ broker의 Exchange를 통해 나가는 메시지가 B 장비에 있는 RabbitMQ broker의 Queue에 들어가야 하는 요구사항이 있었기에, Federation을 찾아보게 되었습니다.&lt;/p&gt;
&lt;h1&gt;What does a federated exchange do?&lt;/h1&gt;
&lt;p&gt;Federated Exchange는 다른 Exchange(upstream exchange)에 연결되고, Upstream exchange에 발송된 메시지는 Federated exchange에 복사가 된다. ( 아래 그림을 우선 보시면 무슨 내용인지 이해가 갈 겁니다. )&lt;br/&gt;
Upstream exchange는 본 작업을 위해서 재설정을 하지 않아도 되고, 같은 Broker나 같은 Cluster에 없어도 된다.&lt;br/&gt;
아래 그림은 1개의 Broker에 있는 1개의 Single federated exchange가 다른 Broker들에 소속된 Upstreaming Exchange 들에 연결되어 있는 것을 도식화 한 것이다.&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="RabbitMQ Federation" src="/images/rmq_federation/rmq_federation_00.png"&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. Are all messages copied?&lt;/h3&gt;
&lt;p&gt;원하는 메시지만 복사할 수도 있다. 이 설정은 federation plugin을 통해서 설정할 수 있는데, 그 방법은 아래에 나온다.&lt;/p&gt;
&lt;h3&gt;2. How does a federated exchange link to its upstream exchanges?&lt;/h3&gt;
&lt;p&gt;Federated exchange를 설정하면, 각 Upstream exchange들의 목록이 Connection properties와 함께 보여진다.&lt;/p&gt;
&lt;h3&gt;3. Can I federate a federated exchange?&lt;/h3&gt;
&lt;p&gt;Federated exchange를 upstream exchange로 사용하는 것을 막을 방법은 없다...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loop Case: A, B Exchange가 서로를 upstream exchange라고 설정하면, 이게 Loop가 되는 것임...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여러 개의 Exchange로 형성된 Infinite Loop이 있을 수 있는데... 이 때 메시지가 계속 re-route되는 것을 막고 싶다면, 메시지가 복사되는 최대 회수를 제한하면 된다. max-hop 참고.&lt;/p&gt;
&lt;h3&gt;4. Can I federate any exchange?&lt;/h3&gt;
&lt;p&gt;거의 다 된다고 보면된다. 단, Default exchange( '' )를 federate 할 수는 없다. ( 이건, Queue에 직접 접근할 때 사용하는 것이기 때문... )&lt;br/&gt;
그 외에 RabbitMQ가 내부적으로 사용하는 Exchange에 대해서는 사용할 수 없음.&lt;/p&gt;
&lt;h3&gt;5. What are typical uses for federated exchanges?&lt;/h3&gt;
&lt;p&gt;일반적으로 사용하는 Logical Exchange를 N개의 다른 Broker의 Exchange로 분산시킬때 사용한다.&lt;br/&gt;
또 다른 예로는 1개의 Massive fanout을 수행하는 Exchange가 N개의 다른 Broker에 메시지를 전달하는 경우가 있다.&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;Inter-broker communication은 AMQP로 구현된다. Binding은 같이 설정되고, bind / unbind 명령은 upstream exchange로 전송된다. 따라서, federated exchange는 subscription을 갖고 있어야만 메시지를 받을 수 있다.&lt;br/&gt;
Binding이 설정될 때, upstream으로는 비동기적으로 명령이 발송되기 때문에, adding / removing binding의 효과는 (메시지가 왔다갔다 하는 것이) 보여질 때 비로소 보증된다...???&lt;br/&gt;&lt;br/&gt;
메시지는 upstream exchange가 있는 브로커의 특정 큐에 버퍼링된다. 이를 &lt;strong&gt;Upstreaming queue&lt;/strong&gt;라고 한다.&lt;br/&gt;
아래는 1개의 Federated exchange와 1개의 Upstream exchange가 연결된 것을 보여준다. 그림에서 보면 왼쪽의 회색으로 표현된 upstream queue가 보이는데, upstreaming queue를 이용해서 binding이 된 것을 표현하는 것이다.&lt;br/&gt;
upstream link에 있는 두꺼운 화살표는 메시지가 federated exchange로 republish 되는 것을 표현한 것이다.
&lt;br/&gt;&lt;br/&gt;
&lt;img alt="1:1 Topology" src="/images/rmq_federation/rmq_federation_01.png"&gt;
&lt;br/&gt;&lt;br/&gt;
두 개의 Exchange에 무언가를 보내면, federated exchange에 연결된 queue에서 그 정보를 받을 것이다. 하지만, Federated exchange(오른쪽)에 메시지를 직접 보내면, upstream exchange가 있는 브로커 내의 queue(왼쪽 아래)는 그 메시지를 받을 수 없다.&lt;/p&gt;
&lt;h1&gt;Example topologies&lt;/h1&gt;
&lt;p&gt;여러가지 Topology를 보여줄 텐데, RabbitMQ broker는 주황색 토끼 얼굴로 표시된다. (cluster가 될 수도 있음.)&lt;/p&gt;
&lt;h3&gt;1. Pair of federated exchanges&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="1:1 pair" src="/images/rmq_federation/rmq_federation_02.png"&gt;
&lt;br/&gt;&lt;br/&gt;
각 Exchange는 서로 대칭된 상태로 연결되어 있다. 두 개의 Consumer가 각자의 Publisher가 보낸 메시지를 받을 수 있다.&lt;br/&gt;
각 링크는 max-hops=1로 설정되어 있는데, 이는 메시지가 1번만 복사된다는 의미이다. ( 1 이상으로 설정하면, 동일한 메시지의 Multiple copy를 볼 수 있게 되니... 꼬이게 됨... )&lt;/p&gt;
&lt;h3&gt;2. Small complete graph&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="small complete graph" src="/images/rmq_federation/rmq_federation_03.png"&gt;
&lt;br/&gt;&lt;br/&gt;
위와 유사하되, 3개의 Exchange가 서로 맞물려 있는 상태이다. 여기서도 max-hops=1로 지정한다. (지정된 녀석에게만 전달되도록...)&lt;/p&gt;
&lt;h3&gt;3. Fan-out&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="fan-out" src="/images/rmq_federation/rmq_federation_04.png"&gt;
&lt;br/&gt;&lt;br/&gt;
1개의 Master exchange가 tree 형태로 다른 Exchange와 연결되고, Depth가 깊어질 수록 확장되는 형태이다. Tree에 연결된 Exchange node들은 모두 Master가 보낸 메시지를 받을 수 있다.&lt;br/&gt;
Loop이 없기 때문에, max-hops 값이 크게 중요하지는 않지만, 적어도, longest depth 값 만큼은 입력이 되야 된다. (그래야 끝까지 전달이 되지...) Tree level - 1 값이면 된다.&lt;/p&gt;
&lt;h3&gt;4. Ring&lt;/h3&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img alt="ring" src="/images/rmq_federation/rmq_federation_05.png"&gt;
&lt;br/&gt;&lt;br/&gt;
Ring 안에 6개의 브로커가 단일 링크로 연결되어 있다. max-hops=5이기 때문에, 어떤 메시지를 보냈을 때, 자기 자신한테까지 돌아오지는 않는다.&lt;br/&gt;
1개의 Broker가 오동작을 일으키면, 이 토폴로지 자체가 깨지기 때문에, 상대적으로 견고하지는 않은 Topology이다.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/federated-exchanges.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - #00</title><link href="/rabbitmq-00.html" rel="alternate"></link><published>2019-01-25T11:30:00+09:00</published><updated>2019-01-25T11:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-25:/rabbitmq-00.html</id><summary type="html">&lt;p&gt;RabbitMQ Study #00&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Prologue&lt;/h2&gt;
&lt;p&gt;여기서는 몇장의 이미지만 올립니다.&lt;/p&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;&lt;img alt="definition" src="/images/rmq_00/rmq_00_definition.png"&gt;&lt;/p&gt;
&lt;h2&gt;Exchange Type&lt;/h2&gt;
&lt;p&gt;&lt;img alt="definition" src="/images/rmq_00/rmq_00_exchange_type.png"&gt;&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry><entry><title>RabbitMQ - #01</title><link href="/rabbitmq-01.html" rel="alternate"></link><published>2019-01-25T11:30:00+09:00</published><updated>2019-01-25T11:30:00+09:00</updated><author><name>good-paper</name></author><id>tag:None,2019-01-25:/rabbitmq-01.html</id><summary type="html">&lt;p&gt;RabbitMQ Study #01 -&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Prologue&lt;/h1&gt;
&lt;p&gt;본 문서는 RabbitMQ 홈페이지에 나와 있는 튜토리얼 문서를 공부하는 차원에서 필요한 부분만 해석해서 요약한 문서입니다. 이 점 참고해주세요.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;RabbitMQ는 메시지 브로커이다. 우체국으로 생각하면 편함.
 - 우체통에 편지를 넣으면, 우체부가 수신처에 편지를 갖다줄 것이라는 확신을 할 수 있지 않은가??
여기서 우체국, 우체통, 우체부를 RabbitMQ라 할 수 있다. (있단다...)&lt;/p&gt;
&lt;p&gt;&lt;img alt="producer producer" src="/images/rmq_01/rmq_01_producer.png"&gt;&lt;/p&gt;
&lt;p&gt;Producing은 메시지를 전달하는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue queue" src="/images/rmq_01/rmq_01_queue.png"&gt;&lt;/p&gt;
&lt;p&gt;Queue는 RabbitMQ 안에 들어있는 우체통과 같은 것이다. 이 큐는 RabbitMQ Server가 존재하는 Host의 리소스를 잡아먹기 때문에, Host 서버만 성능이 좋으면 된다. 송수신부의 Application들은 이 Queue에 대한 성능에 신경쓸 필요가 없다.
1개 Queue에 여러 발송자가 메시지를 던질 수 있고, 1개 Queue에 여러 수신자가 메시지를 받아갈 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="consumer" src="/images/rmq_01/rmq_01_consumer.png"&gt;&lt;/p&gt;
&lt;p&gt;Consuming은 메시지를 수신하는 것을 의미한다. (그 메세지에 대한 처리는 알아서들 하겠지...)&lt;/p&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;여기서는 Python을 예로 사용한다. RabbitMQ를 활용하기 위한 Python의 package는 pika이다.
Tutorial로 Producer / Consumer를 각각 만들어서 테스트 해 볼 것임. 이를 도식화하면 아래와 같음.&lt;/p&gt;
&lt;p&gt;&lt;img alt="overall" src="/images/rmq_01/rmq_01_overall.png"&gt;&lt;/p&gt;
&lt;h3&gt;1. Sending&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sending" src="/images/rmq_01/rmq_01_sending.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="c1"&gt;# connection 설정득 &amp;amp; channel 획득&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Queue 선언&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 데이터 전송.&lt;/span&gt;
&lt;span class="c1"&gt;# RabbitMQ에서 메시지는 Queue로 바로 보낼 수 없고, Exchange를 거쳐서만 갈 수 있다. 자세한건 다음에 나오니, 우선 그렇다는 것만 알고 넘어감...&lt;/span&gt;
&lt;span class="c1"&gt;# Exchange를 공백으로 놓으면, 사용자가 지정한 Queue로 메시지를 바로 보낼수 있다. 이를 위해서 Routine key로 Queue 이름을 집어 넣는다.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;exchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Sent &amp;#39;Hello World!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 다 했으면, Connection 종&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Receiving&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sending" src="/images/rmq_01/rmq_01_receiving.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="c1"&gt;# connection 설정 및 channel 획득&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Queue 선언( 위에서 선언했는데도 또 선언해도 되는가...? Queue 선언은 Idempotent 성격이 적용되기 때문에, 없으면 만들고, 있으면 그대로 있는 것을 씀.)료&lt;/span&gt;
&lt;span class="c1"&gt;# 생각해보면... 실제 환경에서는 Server / Client가 같은 서버에 있는 것도 아니고, 같은 코드를 공유하지 않을 수도 있으니... 이렇게 하면 더 편할듯.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 위에 정의한 함수를 callback으로 등록하고, 메시지가 오면, 위 함수가 실행됨.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_ack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 무한대 루프를 돌면서 메시지 수신을 처리한다. (나중에 종료하고 싶으면 Ctrl+c로 종료하면 된다.)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Result&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;##################### send.py&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Waiting &lt;span class="k"&gt;for&lt;/span&gt; messages. To &lt;span class="nb"&gt;exit&lt;/span&gt; press CTRL+C
 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Received b&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#####################&lt;/span&gt;

&lt;span class="c1"&gt;##################### receive.py&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Sent &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#####################&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Next...&lt;/h1&gt;
&lt;p&gt;다음 절에서는 Queue에 Naming을 한 다음 사용하는 것을 배운다.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.rabbitmq.com/tutorials/tutorial-one-python.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="amqp"></category><category term="rabbitmq"></category></entry></feed>